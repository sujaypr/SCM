# Docker Compose configuration for AI Supply Chain Management Platform
services:
  # Backend Service (FastAPI) - SQLite only
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-supplychain-backend
    ports:
      - "8000:8000"
    environment:
      - FASTAPI_ENV=production
      - DATABASE_URL=sqlite:////app/ai_supplychain.db
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      - SECRET_KEY=${SECRET_KEY:-ai-supplychain-default-secret}
    volumes:
      - ./backend/logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./backend/ai_supplychain.db:/app/ai_supplychain.db
    networks:
      - supplychain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]

  # Frontend Service (React.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-supplychain-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - supplychain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  supplychain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16