# Docker Compose configuration for AI Supply Chain Management Platform
version: '3.8'

services:
  # Backend Service (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-supplychain-backend
    ports:
      - "8000:8000"
    environment:
      - FASTAPI_ENV=production
      - DATABASE_URL=postgresql://supplychain:supplychain123@postgres:5432/ai_supplychain
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      - SECRET_KEY=${SECRET_KEY:-ai-supplychain-default-secret}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend/logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - supplychain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service (React.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-supplychain-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - supplychain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-supplychain-postgres
    environment:
      - POSTGRES_DB=ai_supplychain
      - POSTGRES_USER=supplychain
      - POSTGRES_PASSWORD=supplychain123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - supplychain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supplychain -d ai_supplychain"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-supplychain-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - supplychain-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai-supplychain-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - supplychain-network
    restart: unless-stopped
    profiles:
      - production  # Only start with --profile production

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  supplychain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16